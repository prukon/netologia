import UIKit
//task1

//1. Инкапсуляция (хранение свойств и действий чего-либо в одном месте)
//Есть класс Пылесос. Он хранит в себе:
// - мешок для сбора пыли (проперти_1)
// - фильтр (проперти_2)
// - пылесос умеет пылесосить пыль (метод_1)

//Есть класс мультиварка. Он хранит в себе:
// - кастрюлю для варки (проперти_1)
// - нагреватель (проперти_2)
// - Варка сожержимого кострюли (метод_1)

//2. Наследование (передача свойств и действий от родительскому к дочернему классу)
//Есть класс БытоваяТехника. Он хранит в себе:
// - мощность
// - цена
// - размер
//- Бытовая техника умеет включаться

//Есть класс Пылесос, который является дочерним классом к классу БытоваяТехника
//класс Пылесос УНАСЛЕДОВАЛ свойства (мощность, цена, размер, бренд) и УНАСЛЕДОВАЛ возможность включаться, т.е использовать метод родителя.

//3. Полиморфизм
//Класс Мультиварка, о котором мы говорили ранее умеет варить содержимое (метод "варка сожердимого"). Она умеет это делать при помощи нагревателя, но это неважно тому, кто будет ей пользоваться используя метод "варка сожердимого" . Мультиварка  при этом может использовать нагреватель, или урановый мини реактор или пыльцу Питера Пена. Важно, чтобы метод нагрева работал, а как - это неважно. Это и есть полиморфизм.

//4. Абстракция
//Храниние в классе только того, что необходимо
//Есть класс Ручка
//Она имеет:
// - стержень
// - чернила
// - она умеет писать

//те мы абстрагировались и указали в классе только то, что небходимо.


//Наследование, Инкапсуляция, Абстракция
class Appliances {
    var power: Int
    var price: Int
    var size: String
    var brand: String = "Bosh"
    
    func enabling(){
        print("Я включен")
    }
    init(power:Int, price: Int, size: String) {
        self.size = size
        self.power = power
        self.price = price
    }
}
class VacuumCleaner: Appliances {
    var dustBag: String = "Мешок для мусора"
    var dustFilter: String = "Фильтр для мусора"
    
    func vacuum(){
        print("Я начал пыселососить")
    }
}

var vacuumCleaner1: VacuumCleaner = .init(power: 1500, price: 8000, size: "20, 40, 60")
print(vacuumCleaner1.brand) //бренд унаследован от родителя
print(vacuumCleaner1.power) //проперти power унаследовано от родителя и инициализировано в объекте дочернего класса
vacuumCleaner1.enabling() //Включение пылесоса (унаследованный метод)


//Полиморфизм
class Multicooker {
    var pot: String = "Кастрюля с покрытием, 1 литр"
    var radiator: String = "Нагреватель 1500 Вт"
    private func turnOnHeating(){
    }
    private func closeLid(){
    }
    func cook(){
        turnOnHeating()
        closeLid()
        print ("Еда варится")
    }

}
var multicooker1 = Multicooker()
multicooker1.cook() //вызов метода для варки еды. При этом мы не знаем что происходит внутри метода.


//task2
//Класс
// - БытоваяТехника (хранит мощность, цену. Умеет включаться)
// - Насекомые (хранит класс (класс насекомого), размер, семейство, среду обитания. Умеет двигаться, дышать.

//Объект
//Экземпляры классов. Для класса БытоваяТехника, объекты будут "Холодильник", "Пылесос". Те вполне конкретные предметы.

//Свойства объектов
//Параметры объектов. Для объекта Холодильник это будет мощность, размер, цвет.

//Методы
//Действия, которые мгут совершать объекты. Для холодильника это будет "охлаждение еды", "Заморозка еды".
